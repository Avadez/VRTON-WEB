// Service Worker para cache offline - VRTon
const CACHE_NAME = 'vrton-v1.5.0';
const isDevelopment = location.hostname === 'localhost' || location.hostname === '127.0.0.1';

const urlsToCache = [
  '/',
  '/colaboradores.html',
  '/styles.css',
  '/scripts/script.js',
  '/scripts/faq.js',
  '/scripts/menu.js',
  '/scripts/colaboradores-fix.js',
  '/scripts/equipos.js',
  '/scripts/tracking.js',
  '/data/equipos.json',
  '/assets/logo.png',
  '/assets/fondo.mp4',
  '/assets/comunidad.png',
  'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css'
];

// Instalar Service Worker
self.addEventListener('install', function(event) {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(function(cache) {
        console.log('Cache abierto');
        return cache.addAll(urlsToCache);
      })
  );
});

// Interceptar requests
self.addEventListener('fetch', function(event) {
  // Network-first strategy for HTML files to ensure fresh content
  if (event.request.destination === 'document' || event.request.url.endsWith('.html')) {
    event.respondWith(
      fetch(event.request)
        .then(function(response) {
          // If fetch succeeds, update cache and return response
          if (response && response.status === 200) {
            var responseToCache = response.clone();
            caches.open(CACHE_NAME)
              .then(function(cache) {
                cache.put(event.request, responseToCache);
              });
          }
          return response;
        })
        .catch(function() {
          // If network fails, try cache
          return caches.match(event.request);
        })
    );
  } else {
    // Cache-first strategy for other resources (CSS, JS, images)
    event.respondWith(
      caches.match(event.request)
        .then(function(response) {
          // Cache hit - devolver respuesta del cache
          if (response) {
            return response;
          }

          return fetch(event.request).then(
            function(response) {
              // Verificar que la respuesta sea v√°lida
              if(!response || response.status !== 200 || response.type !== 'basic') {
                return response;
              }

              // Clonar la respuesta
              var responseToCache = response.clone();

              caches.open(CACHE_NAME)
                .then(function(cache) {
                  cache.put(event.request, responseToCache);
                });

              return response;
            }
          );
        })
      );
  }
});

// Actualizar cache
self.addEventListener('activate', function(event) {
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.map(function(cacheName) {
          if (cacheName !== CACHE_NAME) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});
